-- Keymaps are automatically loaded on the VeryLazy event
-- Default keymaps that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/keymaps.lua
-- Add any additional keymaps here
-----------------------------------------------------------
local vim = vim
local opts = { noremap = true, silent = true }

local keymap = vim.keymap.set
-- local term_opts = { silent = true }
--
-- -- Shorten function name
-- local keymap = vim.api.nvim_set_keymap
--
-- --Remap space as leader key
-- keymap("", "<Space>", "<Nop>", opts)
-- vim.g.mapleader = " "
-- vim.g.maplocalleader = " "
--
-- -- Modes
-- --   normal_mode = "n",
-- --   insert_mode = "i",
-- --   visual_mode = "v",
-- --   visual_block_mode = "x",
-- --   term_mode = "t",
-- --   command_mode = "c",
--
-- -- Normal --
-- -- Better window navigation
-- keymap("n", "<C-h>", "<C-w>h", opts)
-- keymap("n", "<C-j>", "<C-w>j", opts)
-- keymap("n", "<C-k>", "<C-w>k", opts)
-- keymap("n", "<C-l>", "<C-w>l", opts)
-- keymap("n", "<leader>tn", ":tabnew<CR>", opts)
-- keymap("n", "<leader>tk", ":tabnext<CR>", opts)
-- keymap("n", "<leadek>tj", ":tabprev<CR>", opts)
-- keymap("n", "<leader>to", ":tabo<CR>", opts)
keymap("n", "<leader>rr", ":source % <CR>", opts)
-- keymap("n", "<C-S>", ":%s/", opts)
--
-- keymap("n", "<leader>n", ":Neotree <cr>", opts)
keymap("n", "<leader>bk", ":bd<CR>", opts)
--
-- -- Resize with arrows
-- keymap("n", "<C-Up>", ":resize +2<CR>", opts)
-- keymap("n", "<C-Down>", ":resize -2<CR>", opts)
-- keymap("n", "<C-Left>", ":vertical resize -2<CR>", opts)
-- keymap("n", "<C-Right>", ":vertical resize +2<CR>", opts)
--
-- -- Insert --
-- -- Press jk fast to enter
-- ---------------------------------------
-- -- keymap("i", "jk", "<ESC>", opts)
-- -- keymap("i", "kj", "<ESC>", opts)
-- ---------------------------------------
--
-- -- Visual --
-- -- Stay in indent mode
-- keymap("v", "<", "<gv", opts)
-- keymap("v", ">", ">gv", opts)
--
-- -- Move text up and down
-- keymap("n", "<A-j>", ":m .+1<CR>==", opts)
-- keymap("n", "<A-k>", ":m .-2<CR>==", opts)
-- keymap("i", "<A-j>", "<Esc>:m .+1<CR>==gi", opts)
-- keymap("i", "<A-k>", "<Esc>:m .-2<CR>==gi", opts)
-- keymap("v", "<A-j>", ":m '>+1<CR>gv==gv", opts)
-- keymap("v", "<A-k>", ":m '<-2<CR>gv==gv", opts)
-- -- Visual Block --
-- keymap("x", "<A-j>", ":move '>+1<CR>gv-gv", opts)
-- keymap("x", "<A-k>", ":move '<-2<CR>gv-gv", opts)
--
-- -- Terminal --
-- -- Better terminal navigation
-- keymap("t", "<C-h>", "<C-\\><C-N><C-w>h", term_opts)
-- keymap("t", "<C-j>", "<C-\\><C-N><C-w>j", term_opts)
-- keymap("t", "<C-k>", "<C-\\><C-N><C-w>k", term_opts)
-- keymap("t", "<C-l>", "<C-\\><C-N><C-w>l", term_opts)
--
-- vim.cmd([[
--    inoremap <c-u> <ESC>viwUi
--    nnoremap <c-u> viwU<Esc>
--
--    nnoremap <S-l> :bNext<CR>
--    nnoremap <S-h> :bprevious<CR>
--
--    nnoremap n nzzzv
--    nnoremap N Nzzzv
--
-- ]])
--
-- keymap("n", "<leader>tz", [[<cmd>lua require("zen-mode").toggle({ window = { width = .85 } })<CR>]], opts)
-- --Add leader shortcuts
--
-- keymap("n", "<leader>tn", [[<cmd>SidebarNvimToggle<CR>]], opts)
--
-- keymap("n", "gD", "<cmd>lua vim.lsp.buf.declaration()<CR>", opts)
-- keymap("n", "gd", "<cmd>lua vim.lsp.buf.definition()<CR>", opts)
-- keymap("n", "K", "<cmd>lua vim.lsp.buf.hover()<CR>", opts)
-- keymap("n", "gi", "<cmd>lua vim.lsp.buf.implementation()<CR>", opts)
-- keymap("n", "<leader>k", "<cmd>lua vim.lsp.buf.signature_help()<CR>", opts)
-- keymap("n", "<leader>wa", "<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>", opts)
-- keymap("n", "<leader>wr", "<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>", opts)
-- keymap("n", "<leader>wl", "<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>", opts)
-- keymap("n", "<leader>D", "<cmd>lua vim.lsp.buf.type_definition()<CR>", opts)
-- keymap("n", "<leader>rn", "<cmd>lua vim.lsp.buf.rename()<CR>", opts)
-- keymap("n", "gr", "<cmd>lua vim.lsp.buf.references()<CR>", opts)
-- keymap("n", "<leader>ca", "<cmd>lua vim.lsp.buf.code_action()<CR>", opts)
-- -- vim.api.nvim_buf_set_keymap(bufnr, 'v', '<leader>ca', '<cmd>lua vim.lsp.buf.range_code_action()<CR>', opts)
-- keymap("n", "<leader>e", "<cmd>lua vim.lsp.diagnostic.show()<CR>", opts)
-- keymap("n", "[d", "<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>", opts)
-- keymap("n", "]d", "<cmd>lua vim.lsp.diagnostic.goto_next()<CR>", opts)
-- keymap("n", "<leader>q", "<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>", opts)
--
-- vim.cmd([[ command! Format execute 'lua vim.lsp.buf.formatting()' ]])
